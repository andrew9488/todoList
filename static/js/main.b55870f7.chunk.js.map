{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/Todolists/tasks-reducer.ts","features/Todolists/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TodoLists.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todoListsApi","get","title","post","todoListId","delete","put","taskId","model","initialState","updateTaskTC","dispatch","getState","currentTask","tasks","find","t","id","status","deadline","description","priority","Low","startDate","then","res","type","updateTaskAC","rootReducer","combineReducers","state","action","filter","task","map","todoList","stateCopy","todoLists","forEach","tl","st","newFilterValue","newTitle","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","onBlur","helperText","label","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeItem","autoFocus","onDoubleClick","Task","console","log","changeTaskTitle","useCallback","className","Completed","Checkbox","checked","changeTaskStatus","New","removeTask","Delete","TodoList","useDispatch","useEffect","setTasksAC","data","items","allTaskForTodoList","taskForTodoList","addTask","changeTodoListTitle","removeTodoList","removeTodolist","all","changeFilter","active","completed","style","listStyle","paddingLeft","Button","size","TodoLists","useSelector","removeTaskAC","removeTaskTC","taskTitle","item","addTaskTC","removeTodoListTC","addTodoList","changeTodoListTitleAC","changeTodoListTitleTC","Grid","container","padding","Paper","elevation","spacing","allTaskTodoList","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b55870f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport type TodoListType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n    data: D\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n        withCredentials: true,\r\n        baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n        headers: {\r\n            \"API-KEY\": \"daffbeb3-8fec-4c34-9d8d-6fcb41a16549\"\r\n        }\r\n    }\r\n)\r\n\r\nexport const todoListsApi = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoListTitle(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    }\r\n}\r\n","import {AddTodoListActionType, RemoveTodoListActionType, SetTodoListsActionType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoListsApi} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\ntype UpdateTaskActionType = ReturnType<typeof updateTaskAC>\r\ntype SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\nexport type ActionsTodoListType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListsActionType\r\n    | SetTasksActionType\r\n\r\ntype UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsTodoListType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)\r\n            }\r\n        }\r\n        case \"ADD-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todoListId]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: action.tasks\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string) =>\r\n    ({type: \"REMOVE-TASK\", taskId: taskId, todoListId: todoListId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateTaskDomainModelType, todoListId: string) =>\r\n    ({type: \"UPDATE-TASK\", taskId, model, todoListId} as const)\r\n\r\nexport const setTasksAC = (todoListId: string, tasks: Array<TaskType>) =>\r\n    ({type: \"SET-TASKS\", todoListId, tasks} as const)\r\n\r\nexport const fetchTaskTC = (todoListId: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.getTasks(todoListId)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todoListId, res.data.items))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.deleteTask(todoListId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todoListId))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.createTask(todoListId, title)\r\n        .then(res => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, model: UpdateTaskDomainModelType, todoListId: string) =>\r\n\r\n    (dispatch: Dispatch<ActionsTodoListType>, getState: () => AppRootStateType) => {\r\n\r\n        const allAppTasks = getState().tasks\r\n        const tasksCurrentTodoList = allAppTasks[todoListId]\r\n        const currentTask = tasksCurrentTodoList.find(t => t.id === taskId)\r\n        if (currentTask) {\r\n            todoListsApi.updateTask(todoListId, taskId, {\r\n                title: currentTask.title,\r\n                status: currentTask.status,\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description,\r\n                priority: TaskPriorities.Low,\r\n                startDate: currentTask.startDate,\r\n                ...model\r\n            })\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, model, todoListId))\r\n                })\r\n        }\r\n    }\r\n\r\n","import {todoListsApi, TodoListType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof addTodoListAC>\r\ntype ChangeFilterTodoListActionType = ReturnType<typeof changeFilterTodoListAC>\r\ntype ChangeTodoListTitleActionType = ReturnType<typeof changeTodoListTitleAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodoListDomainType = TodoListType & { filter: FilterValuesType }\r\n\r\nexport type ActionsTodoListType =\r\n    RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeFilterTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | SetTodoListsActionType\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListsReducer = (state: Array<TodoListDomainType> = initialState, action: ActionsTodoListType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(st => st.id !== action.todoListId)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [{...action.todoList, filter: \"all\"}, ...state]\r\n        }\r\n        case \"CHANGE-FILTER-TODOLIST\": {\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, filter: action.newFilterValue} : tl)\r\n        }\r\n        case \"CHANGE-TITLE-TODOLIST\": {\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, title: action.newTitle} : tl)\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map(tl => ({...tl, filter: \"all\"}))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (id: string) => ({type: \"REMOVE-TODOLIST\", todoListId: id} as const)\r\n\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: \"ADD-TODOLIST\", todoList} as const)\r\n\r\nexport const changeFilterTodoListAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: \"CHANGE-FILTER-TODOLIST\", newFilterValue: filter, todoListId: id} as const)\r\n\r\nexport const changeTodoListTitleAC = (title: string, id: string) =>\r\n    ({type: \"CHANGE-TITLE-TODOLIST\", todoListId: id, newTitle: title} as const)\r\n\r\nexport const setTodoListsAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\n\r\nexport const fetchTodoListsTC = () => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.getTodoLists()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n        })\r\n}\r\n\r\nexport const removeTodoListTC = (todoListId: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.deleteTodoList(todoListId)\r\n        .then(res => {\r\n            dispatch(removeTodoListAC(todoListId))\r\n        })\r\n}\r\n\r\nexport const addTodoListTC = (title: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.createTodoList(title)\r\n        .then(res => {\r\n            dispatch(addTodoListAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch<ActionsTodoListType>) => {\r\n    todoListsApi.updateTodoListTitle(todoListId, title)\r\n        .then(res => {\r\n            dispatch(changeTodoListTitleAC(title, todoListId))\r\n        })\r\n}\r\n","import {tasksReducer} from '../features/Todolists/tasks-reducer';\r\nimport {todoListsReducer} from '../features/Todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    title: string\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((props) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitleItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeTitleItemHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                onBlur={() => {\r\n                    setError(null)\r\n                }}\r\n                helperText={error ? \"Title is required!\" : \"\"}\r\n                label={props.title}\r\n                error={!!error}\r\n            />\r\n            <IconButton onClick={addItem} color=\"primary\">\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\")\r\n            offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                         autoFocus\r\n                         onBlur={offEditMode}\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n    console.log('task is called')\r\n\r\n    const removeTask = () => props.removeTask(props.task.id, props.todoListId)\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.task.id,\r\n        e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTitle, props.todoListId)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return (\r\n        <div>\r\n            <li className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"secondary\"}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={changeStatus}/>\r\n                <EditableSpan title={props.task.title} changeItem={changeTaskTitle}/>\r\n                <IconButton onClick={removeTask}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        </div>\r\n    );\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {fetchTaskTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (taskTitle: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (todoListId: string, newFilterValue: FilterValuesType) => void\r\n    changeTaskStatus: (taskId: string, statuses: TaskStatuses, todoListId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTaskTC(props.id))\r\n    }, [])\r\n\r\n    let allTaskForTodoList = props.tasks\r\n    let taskForTodoList = allTaskForTodoList\r\n\r\n    if (props.filter === \"active\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(newTitle, props.id)\r\n    }, [props.changeTodoListTitle, props.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        props.removeTodolist(props.id)\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const all = useCallback(() => props.changeFilter(props.id, \"all\"), [props.changeFilter, props.id])\r\n    const active = useCallback(() => props.changeFilter(props.id, \"active\"), [props.changeFilter, props.id])\r\n    const completed = useCallback(() => props.changeFilter(props.id, \"completed\"), [props.changeFilter, props.id])\r\n\r\n\r\n    const tasks = taskForTodoList.map(t => {\r\n        return (\r\n            <Task key={t.id} task={t} changeTaskStatus={props.changeTaskStatus} changeTaskTitle={props.changeTaskTitle}\r\n                  removeTask={props.removeTask} todoListId={props.id}/>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeItem={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} title={\"Task title\"}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={all}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={active}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={completed}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\n\r\n","import {\r\n    addTodoListTC,\r\n    changeFilterTodoListAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodoListDomainType\r\n} from \"./todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TodoList} from \"./Todolist/TodoList\";\r\n\r\nexport const TodoLists: React.FC = () => {\r\n\r\n    let todoLists: Array<TodoListDomainType> = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\r\n    let tasks: TasksStateType = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => { // функция удаления таски\r\n        dispatch(removeTaskTC(todoListId, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((taskTitle: string, todoListId: string) => { //функция добавления таски\r\n        dispatch(addTaskTC(todoListId, taskTitle))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, todoListId))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todoListId))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(removeTodoListTC(todoListId))\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((newTitle: string) => {\r\n        dispatch(addTodoListTC(newTitle))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((todoListId: string, newFilterValue: FilterValuesType) => { //функция фильтрации таски\r\n        dispatch(changeFilterTodoListAC(todoListId, newFilterValue))\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListId: string) => {\r\n        dispatch(changeTodoListTitleTC(todoListId, newTitle))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px 0\"}}>\r\n                <Paper style={{padding: \"5px\"}}\r\n                       elevation={3}>\r\n                    <AddItemForm addItem={addTodoList} title={\"TodoList title\"}/>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let allTaskTodoList = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"7px\"}}\r\n                                       elevation={3}>\r\n                                    <TodoList\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTaskTodoList}\r\n                                        addTask={addTask}\r\n                                        removeTodolist={removeTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodoLists} from \"../features/Todolists/TodoLists\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodoLists/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}