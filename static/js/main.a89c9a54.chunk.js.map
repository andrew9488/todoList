{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onBlur","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeItem","autoFocus","onDoubleClick","TodoList","tasks","map","t","id","isDone","type","checked","changeStatus","newTitle","changeTaskTitle","removeTask","changeTodoListTitle","removeTodolist","addTask","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","todoListTasks","newFilterValue","todoList","find","tl","taskTitle","newTask","task","removeTodoList","newTodoListID","taskForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a89c9a54.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType ={\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitleItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeTitleItemHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n                   onBlur={() => {\r\n                       setError(null)\r\n                   }}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\")\r\n            offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     autoFocus\r\n                     onBlur={offEditMode}\r\n                     onChange={onChangeTitleHandler}\r\n                     onKeyPress={onKeyPressHandler}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (taskTitle: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(newTitle, props.id)\r\n    }\r\n\r\n    const all = () => props.changeFilter(\"all\", props.id)\r\n    const active = () => props.changeFilter(\"active\", props.id)\r\n    const completed = () => props.changeFilter(\"completed\", props.id)\r\n\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(t.id, newTitle, props.id)\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                <input type=\"checkbox\"\r\n                       checked={t.isDone}\r\n                       onChange={changeStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeItem={changeTaskTitle}/>\r\n                <button onClick={removeTask}>x</button>\r\n            </li>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} changeItem={changeTodoListTitle}/>\r\n                <button onClick={() => props.removeTodolist(props.id)}>x</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === \"all\" ? \"active-filter\" : \"\"}\r\n                    onClick={all}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                    onClick={active}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === \"completed\" ? \"active-filter\" : \"\"}\r\n                    onClick={completed}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    //BLL\r\n    const todoListID1 = v1();\r\n    const todoListID2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListID2, title: \"What to buy\", filter: \"all\"},\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"FindJob\", isDone: false},\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Vegetables\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Cheese\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Meal\", isDone: false},],\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) { // функция удаления таски\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) { //функция фильтрации таски\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function addTask(taskTitle: string, todoListID: string) { //функция добавления таски\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: taskTitle,\r\n            isDone: false\r\n        }\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task: TaskType | undefined = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl=> tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList(newTitle: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title: newTitle,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task: TaskType | undefined = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string){\r\n        const todoList = todoLists.find(t=>t.id === todoListID)\r\n        if (todoList){\r\n            todoList.title = title\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n\r\n    //UI\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n\r\n            {\r\n                todoLists.map(tl => {\r\n                    let taskForTodoList = tasks[tl.id]\r\n                    if (tl.filter === \"active\"){\r\n                        taskForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n                    } if (tl.filter === \"completed\"){\r\n                        taskForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n                    }\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={taskForTodoList}\r\n                            addTask={addTask}\r\n                            removeTodolist={removeTodoList}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            changeStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}