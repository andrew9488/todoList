{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/Application/selectors.ts","features/Actions/App.ts","utils/utils-error.ts","features/Application/application-reducer.ts","features/Application/index.tsx","features/Task/selectors.ts","features/Todolists/selectors.ts","features/Todolists/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/Login/selectors.ts","features/Login/auth-reducer.ts","utils/utils-redux.ts","features/Login/Login.tsx","features/Login/index.tsx","features/Todolists/TodoLists.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/index.tsx","features/Task/tasks-reducer.ts","features/Task/Task.tsx","features/Task/index.tsx","bll/rootReducer.ts","bll/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","appStatusSelector","state","app","status","isInitializedSelector","isInitialized","instance","axios","create","withCredentials","baseURL","headers","todoListsApi","get","title","post","todoListId","delete","put","taskId","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","setIsLoggedIn","changeTasksEntityStatus","changeFilterTodoList","changeTodoListEntityStatus","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","initializeApp","createAsyncThunk","payload","a","response","resultCode","isLoggedIn","slice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","asyncActions","appAsyncActions","appReducer","reducer","tasksSelector","tasks","todoListsSelector","todoLists","fetchTodoLists","removeTodoList","entityStatus","id","addTodoList","todoList","item","changeTodoListTitle","map","tl","filter","index","findIndex","splice","unshift","AddItemForm","React","memo","addItem","disabled","useState","value","setValue","setError","addItemHandler","trimmedTitle","trim","style","display","alignItems","position","width","TextField","variant","onChange","e","currentTarget","onKeyPress","key","then","onBlur","helperText","label","IconButton","onClick","color","marginLeft","right","top","AddBox","isLoggedInSelector","auth","login","logout","useAppDispatch","useDispatch","useActions","actions","useMemo","bindActionCreators","Login","useSelector","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","thunk","authActions","rejected","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","Checkbox","checked","Button","authAsyncActions","authReducer","TodoLists","demo","todoListSelectors","tasksSelectors","todoListsActions","useEffect","useCallback","helper","padding","Paper","elevation","spacing","flexWrap","overflowX","allTaskTodoList","TodoList","EditableSpan","props","editMode","setEditMode","setTitle","offEditMode","changeItem","autoFocus","onDoubleClick","fetchTasks","tasksActions","allTaskForTodoList","taskForTodoList","t","New","Completed","changeTodoListTitleCallback","newTitle","removeTodoListCallback","all","active","completed","addTaskCallback","addTask","Task","task","Delete","listStyle","paddingLeft","justifyContent","size","todoListsAsyncActions","todoListsReducer","items","removeTask","updateTask","getState","currentTask","find","apiModel","deadline","description","priority","Low","startDate","forEach","removeTaskCallback","changeTaskStatus","changeTaskTitle","className","fontSize","tasksAsyncActions","tasksReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","appSelectors","appStatus","AppBar","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","from","textAlign","CircularProgress","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0689bd64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport type TodoListType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type FieldsErrorsType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    fieldsErrors: Array<FieldsErrorsType>\r\n    messages: string[]\r\n    resultCode: number\r\n    data: D\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n        withCredentials: true,\r\n        baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n        headers: {\r\n            \"API-KEY\": \"daffbeb3-8fec-4c34-9d8d-6fcb41a16549\"\r\n        }\r\n    }\r\n)\r\n\r\nexport const todoListsApi = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoListTitle(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{ data: LoginParamsType }>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const appStatusSelector = (state:AppRootStateType) => state.app.status\r\nexport const isInitializedSelector = (state: AppRootStateType) => state.app.isInitialized","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {FilterValuesType} from \"../Todolists/todolists-reducer\";\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>(\"appActions/setAppStatus\")\r\nconst setAppError = createAction<{error: string | null}>(\"appActions/setAppError\")\r\nconst setIsLoggedIn = createAction<{isLoggedIn: boolean}>(\"auth/setIsLoggedIn\")\r\nconst changeTasksEntityStatus = createAction<{ todoListId: string, taskId: string, entityStatus: RequestStatusType }>(\"tasks/changeTasksEntityStatus\")\r\nconst changeFilterTodoList = createAction<{ id: string, filter: FilterValuesType }>(\"todoLists/changeFilterTodoList\")\r\nconst changeTodoListEntityStatus = createAction<{ todoListId: string, entityStatus: RequestStatusType }>(\"todoLists/changeTodoListEntityStatus\")\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError,\r\n    setIsLoggedIn,\r\n    changeTasksEntityStatus,\r\n    changeFilterTodoList,\r\n    changeTodoListEntityStatus\r\n}","import {FieldsErrorsType, ResponseType} from \"../api/todolist-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {appActions} from \"../features/Actions/App\";\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\nconst {setAppError,setAppStatus}=appActions\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n\r\nexport type ThunkError = { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldsErrorsType> } }\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/utils-error\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst {setAppStatus,setIsLoggedIn} = appActions\r\n\r\nconst initializeApp = createAsyncThunk(\"application/initializeApp\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.me()\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n        return {isInitialized: true}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = action.payload.isInitialized\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\n\r\n","import * as appSelectors from \"./selectors\";\r\nimport {slice} from \"./application-reducer\"\r\nimport {asyncActions as appAsyncActions} from \"./application-reducer\"\r\n\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n}\r\n\r\nconst appReducer = slice.reducer\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions,\r\n    appReducer\r\n}\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const tasksSelector = (state:AppRootStateType) => state.tasks;","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const todoListsSelector = (state: AppRootStateType) => state.todoLists;","import {todoListsApi, TodoListType} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListDomainType = TodoListType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nconst {setAppStatus, changeTodoListEntityStatus, changeFilterTodoList} = appActions\r\n\r\nconst fetchTodoLists = createAsyncThunk<{ todoLists: Array<TodoListType> }, undefined, ThunkError>\r\n(\"todoLists/fetchTodoLists\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.getTodoLists()\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {todoLists: response.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodoList = createAsyncThunk(\"todoLists/removeTodoList\", async (todoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodoListEntityStatus({todoListId: todoListId, entityStatus: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.deleteTodoList(todoListId)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {id: todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTodoList = createAsyncThunk<{ todoList: TodoListType }, string, ThunkError>(\"todoLists/addTodoList\", async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n\r\n        const response = await todoListsApi.createTodoList(title)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {todoList: response.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst changeTodoListTitle = createAsyncThunk(\"todoLists/changeTodoListTitle\", async (payload: { todoListId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.updateTodoListTitle(payload.todoListId, payload.title)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {title: payload.title, id: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"todoLists\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n                return action.payload.todoLists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n            })\r\n            .addCase(removeTodoList.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state.splice(index, 1)\r\n            })\r\n            .addCase(addTodoList.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todoList, filter: \"all\", entityStatus: \"idle\"})\r\n            })\r\n            .addCase(changeTodoListTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state[index].title = action.payload.title\r\n            })\r\n            .addCase(changeFilterTodoList, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state[index].filter = action.payload.filter\r\n            })\r\n            .addCase(changeTodoListEntityStatus, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n                if (index !== -1) state[index].entityStatus = action.payload.entityStatus\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTodoLists, removeTodoList, addTodoList, changeTodoListTitle}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormSubmitHelperType = {\r\n    setError: (error: string) => void\r\n    setValue: (value: string) => void\r\n}\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    title: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem, title, disabled = false}) => {\r\n\r\n    const [value, setValue] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitleItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n                .then()\r\n        }\r\n    }\r\n\r\n    const addItemHandler = async () => {\r\n        const trimmedTitle = value.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            addItem(trimmedTitle, {setError, setValue})\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: \"flex\", alignItems: \"center\", position: \"relative\"}}>\r\n            <div style={{width: \"218px\"}}>\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    value={value}\r\n                    onChange={onChangeTitleItemHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    onBlur={() => {\r\n                        setError(null)\r\n                    }}\r\n                    helperText={error}\r\n                    label={title}\r\n                    error={!!error}\r\n                    disabled={disabled}\r\n                />\r\n            </div>\r\n            <IconButton onClick={addItemHandler} color=\"primary\" disabled={disabled}\r\n                        style={{marginLeft: \"14px\", position: \"absolute\", right:\"0px\", top:\"0px\"}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const isLoggedInSelector = (state: AppRootStateType) => state.auth.isLoggedIn;","import {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst {setAppStatus, setIsLoggedIn} = appActions\r\n\r\nconst login = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, ThunkError>(\"auth/login\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.login(payload)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst logout = createAsyncThunk(\"auth/logout\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(setIsLoggedIn, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\n\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"../bll/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authActions, authSelectors} from \"./index\"\r\nimport {useAppDispatch} from \"../../utils/utils-redux\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const thunk = authActions.login(values)\r\n            const action = await dispatch(thunk)\r\n            if (authActions.login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noopener noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox{...formik.getFieldProps(\"rememberMe\")}\r\n                                              checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from \"./selectors\";\r\nimport {asyncActions as authAsyncActions} from \"./auth-reducer\";\r\nimport {slice} from \"./auth-reducer\";\r\nimport {Login} from \"./Login\"\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n}\r\n\r\nconst authReducer = slice.reducer\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    authReducer,\r\n    Login\r\n}","import {TodoListDomainType} from \"./todolists-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TasksStateType} from \"../Task/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../Login/\";\r\nimport {TodoList, todoListsActions, todoListSelectors} from \"./index\";\r\nimport {tasksSelectors} from \"../Task\";\r\nimport {useActions, useAppDispatch} from \"../../utils/utils-redux\";\r\n\r\ntype TodoListsPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<TodoListsPropsType> = ({demo = false}) => {\r\n\r\n    let todoLists: Array<TodoListDomainType> = useSelector(todoListSelectors.todoListsSelector)\r\n    let tasks: TasksStateType = useSelector(tasksSelectors.tasksSelector)\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodoLists} = useActions(todoListsActions)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        if (!todoLists.length) {\r\n            fetchTodoLists()\r\n        }\r\n    }, [])\r\n\r\n    const addTodoList = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        const thunk = todoListsActions.addTodoList(title)\r\n        const action = await dispatch(thunk)\r\n        if (todoListsActions.addTodoList.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error\")\r\n            }\r\n        } else {\r\n            helper.setValue(\"\")\r\n        }\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px 0\"}}>\r\n                <Paper style={{padding: \"10px\", width: \"280px\"}}\r\n                       elevation={3}>\r\n                    <AddItemForm addItem={addTodoList} title={\"TodoList title\"}/>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{flexWrap: \"nowrap\", overflowX: \"scroll\"}}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let allTaskTodoList = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <div style={{width: \"300px\"}}>\r\n                                    <TodoList\r\n                                        todoList={tl}\r\n                                        tasks={allTaskTodoList}\r\n                                        demo={demo}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        );\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\")\r\n            offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                         autoFocus\r\n                         onBlur={offEditMode}\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         disabled={props.disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {TodoListDomainType} from \"../todolists-reducer\";\r\nimport {TaskDomainType} from \"../../Task/tasks-reducer\";\r\nimport {todoListsActions} from \"../index\";\r\nimport {Task, tasksActions} from \"../../Task\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/utils-redux\";\r\nimport {appActions} from \"../../Actions/App\";\r\n\r\ntype TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo(({demo = false, ...props}) => {\r\n\r\n    const {changeTodoListTitle, removeTodoList} = useActions(todoListsActions)\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeFilterTodoList} = useActions(appActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        if (!props.tasks.length) {\r\n            fetchTasks(props.todoList.id)\r\n        }\r\n    }, [])\r\n\r\n    let allTaskForTodoList = props.tasks\r\n    let taskForTodoList = allTaskForTodoList\r\n\r\n    if (props.todoList.filter === \"active\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todoList.filter === \"completed\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const changeTodoListTitleCallback = useCallback((newTitle: string) => {\r\n        changeTodoListTitle({title: newTitle, todoListId: props.todoList.id})\r\n    }, [props.todoList.id, changeTodoListTitle])\r\n    const removeTodoListCallback = useCallback(() => {\r\n        removeTodoList(props.todoList.id)\r\n    }, [props.todoList.id, removeTodoList])\r\n\r\n    const all = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"all\"}), [props.todoList.id])\r\n    const active = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"active\"}), [props.todoList.id])\r\n    const completed = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"completed\"}), [props.todoList.id])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title, todoListId: props.todoList.id})\r\n        const action = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error\")\r\n            }\r\n        } else {\r\n            helper.setValue(\"\")\r\n        }\r\n    }, [props.todoList.id])\r\n\r\n    const tasks = taskForTodoList.map(t => {\r\n        return (\r\n            <Task key={t.id} task={t} todoListId={props.todoList.id} disabled={t.entityStatus === \"loading\"}/>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <Paper style={{padding: \"10px\", position: \"relative\"}}\r\n               elevation={3}>\r\n            <IconButton style={{position: \"absolute\", right: \"9px\", top: \"3px\"}} onClick={removeTodoListCallback}\r\n                        disabled={props.todoList.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan title={props.todoList.title} changeItem={changeTodoListTitleCallback}\r\n                              disabled={props.todoList.entityStatus === \"loading\"}/>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback} title={\"Task title\"}\r\n                         disabled={props.todoList.entityStatus === \"loading\"}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n                {!tasks.length && <span style={{color: \"gray\", marginLeft: \"15px\"}}>No tasks</span>}\r\n                {tasks}\r\n            </ul>\r\n            <div style={{display: \"flex\", justifyContent: \"space-evenly\"}}>\r\n                <Button\r\n                    color={props.todoList.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={all}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.todoList.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={active}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.todoList.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={completed}>Completed\r\n                </Button>\r\n            </div>\r\n        </Paper>\r\n    );\r\n})\r\n\r\n\r\n","import * as todoListSelectors from \"./selectors\";\r\nimport {asyncActions as todoListsAsyncActions} from \"./todolists-reducer\";\r\nimport {slice} from \"./todolists-reducer\";\r\nimport {TodoLists} from \"./TodoLists\";\r\nimport {TodoList} from \"./Todolist/TodoList\"\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n}\r\n\r\n\r\nconst todoListsReducer = slice.reducer\r\n\r\nexport {\r\n    todoListSelectors,\r\n    todoListsActions,\r\n    todoListsReducer,\r\n    TodoLists,\r\n    TodoList\r\n}","import {TaskPriorities, TaskStatuses, TaskType, todoListsApi} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {todoListsActions} from \"../Todolists\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\ntype UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nconst {setAppStatus, changeTasksEntityStatus} = appActions\r\n\r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\nexport type TasksStateType = { [key: string]: Array<TaskDomainType> }\r\nconst initialState: TasksStateType = {}\r\n\r\nconst fetchTasks = createAsyncThunk<{ todoListId: string, tasks: Array<TaskType> }, string, ThunkError>\r\n(\"tasks/fetchTasks\", async (todoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.getTasks(todoListId)\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {todoListId, tasks: response.data.items}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTask = createAsyncThunk(\"tasks/removeTask\", async (payload: { todoListId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTasksEntityStatus({\r\n        todoListId: payload.todoListId,\r\n        taskId: payload.taskId,\r\n        entityStatus: \"loading\"\r\n    }))\r\n    try {\r\n        const response = await todoListsApi.deleteTask(payload.todoListId, payload.taskId)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {taskId: payload.taskId, todoListId: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTask = createAsyncThunk<{ task: TaskType }, { title: string, todoListId: string }, ThunkError>(\"tasks/addTask\",\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n        try {\r\n            const response = await todoListsApi.createTask(payload.todoListId, payload.title)\r\n            if (response.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n                return {task: response.data.data.item}\r\n            } else {\r\n                return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nconst updateTask = createAsyncThunk(\"tasks/updateTask\", async (payload: { taskId: string, model: UpdateTaskDomainModelType, todoListId: string },\r\n                                                               thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const currentTask = state.tasks[payload.todoListId].find(t => t.id === payload.taskId)\r\n    if (!currentTask) {\r\n        return thunkAPI.rejectWithValue(\"error\")\r\n    }\r\n\r\n    const apiModel = {\r\n        title: currentTask.title,\r\n        status: currentTask.status,\r\n        deadline: currentTask.deadline,\r\n        description: currentTask.description,\r\n        priority: TaskPriorities.Low,\r\n        startDate: currentTask.startDate,\r\n        ...payload.model\r\n    }\r\n    try {\r\n        const response = await todoListsApi.updateTask(payload.todoListId, payload.taskId, apiModel)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {taskId: payload.taskId, model: payload.model, todoListId: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(todoListsActions.addTodoList.fulfilled, (state, action) => {\r\n                state[action.payload.todoList.id] = []\r\n            })\r\n            .addCase(todoListsActions.removeTodoList.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(todoListsActions.fetchTodoLists.fulfilled, (state, action) => {\r\n                action.payload.todoLists.forEach(tl => {\r\n                        if (!state[tl.id]) state[tl.id] = []\r\n                    }\r\n                )\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                return {\r\n                    ...state, [action.payload.todoListId]: action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}))\r\n                }\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) tasks.splice(index, 1)\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.task.todoListId]\r\n                tasks.unshift({...action.payload.task, entityStatus: \"idle\"})\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n            .addCase(changeTasksEntityStatus, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) tasks[index].entityStatus = action.payload.entityStatus\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTasks, removeTask, addTask, updateTask}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport {tasksActions} from \"./index\";\r\nimport {useActions} from \"../../utils/utils-redux\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const removeTaskCallback = useCallback(() => removeTask({\r\n        taskId: props.task.id,\r\n        todoListId: props.todoListId\r\n    }), [props.task.id, props.todoListId, removeTask])\r\n\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => updateTask({\r\n        taskId: props.task.id,\r\n        model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n        todoListId: props.todoListId\r\n    }), [props.task.id, props.todoListId, updateTask])\r\n\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        updateTask({taskId: props.task.id, model: {title: newTitle}, todoListId: props.todoListId})\r\n    }, [props.task.id, props.todoListId, updateTask])\r\n\r\n    return (\r\n        <div style={{position: \"relative\"}}>\r\n            <li className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"secondary\"}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={changeTaskStatus}/>\r\n                <EditableSpan title={props.task.title} changeItem={changeTaskTitle} disabled={props.disabled}/>\r\n                <IconButton onClick={removeTaskCallback} disabled={props.disabled}\r\n                            style={{position: \"absolute\", right: \"2px\", top: \"0\"}}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </li>\r\n        </div>\r\n    );\r\n})","import * as tasksSelectors from \"./selectors\";\r\nimport {slice, asyncActions as tasksAsyncActions} from \"./tasks-reducer\";\r\nimport {Task} from \"./Task\";\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n}\r\n\r\nconst tasksReducer = slice.reducer\r\n\r\nexport {\r\n    tasksSelectors,\r\n    tasksActions,\r\n    Task,\r\n    tasksReducer\r\n}","import {combineReducers} from \"redux\";\r\nimport {appReducer} from \"../features/Application\";\r\nimport {tasksReducer} from \"../features/Task\";\r\nimport {todoListsReducer} from \"../features/Todolists\";\r\nimport {authReducer} from \"../features/Login\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    auth: authReducer\r\n})","import thunk from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {rootReducer} from \"./rootReducer\";\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\r\n    module.hot.accept(\"./rootReducer\", () => store.replaceReducer(rootReducer))\r\n}\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport { useActions } from '../../utils/utils-redux';\r\nimport { appActions } from '../../features/Actions/App';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError({error: null})\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodoLists} from \"../features/Todolists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors} from \"../features/Login\";\r\nimport {appActions, appSelectors} from \"../features/Application\";\r\nimport {useActions} from \"../utils/utils-redux\";\r\n\r\n\r\ntype AppPropsType = {}\r\n\r\nexport const App: React.FC<AppPropsType> = () => {\r\n\r\n    const isInitialized = useSelector(appSelectors.isInitializedSelector)\r\n    const appStatus = useSelector(appSelectors.appStatusSelector)\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const {initializeApp} = useActions(appActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutCallback = () => {\r\n        logout()\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color=\"secondary\" size={150}/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackbar/>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutCallback}>Logout</Button>}\r\n                </Toolbar>\r\n                {appStatus === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => <TodoLists demo={false}/>}/>\r\n                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                    <Route path=\"/404\" render={() => <h1>ERROR 404. PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from=\"*\" to=\"/404\"/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {App} from \"./app/App\";\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <HashRouter basename=\"/todolist\">\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n        , document.getElementById(\"root\"));\r\n}\r\nrerenderEntireTree()\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\r\n    module.hot.accept(\"./app/App\", () => rerenderEntireTree())\r\n}"],"sourceRoot":""}