{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/Task/selectors.ts","features/Actions/App.ts","utils/utils-error.ts","features/Todolists/selectors.ts","features/Todolists/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/Login/selectors.ts","features/Login/auth-reducer.ts","utils/utils-redux.ts","features/Login/Login.tsx","features/Login/index.tsx","features/Todolists/TodoLists.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/index.tsx","features/Task/tasks-reducer.ts","features/Task/Task.tsx","features/Task/index.tsx","features/Application/selectors.ts","features/Application/application-reducer.ts","features/Application/index.tsx","bll/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","tasksSelector","state","tasks","instance","axios","create","withCredentials","baseURL","headers","todoListsApi","get","title","post","todoListId","delete","put","taskId","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","setIsLoggedIn","changeTasksEntityStatus","changeFilterTodoList","changeTodoListEntityStatus","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","todoListsSelector","todoLists","fetchTodoLists","createAsyncThunk","payload","a","response","removeTodoList","entityStatus","resultCode","id","addTodoList","todoList","item","changeTodoListTitle","slice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","map","tl","filter","index","findIndex","splice","unshift","asyncActions","AddItemForm","React","memo","addItem","disabled","useState","value","setValue","setError","addItemHandler","trimmedTitle","trim","style","display","alignItems","position","width","TextField","variant","onChange","e","currentTarget","onKeyPress","key","then","onBlur","helperText","label","IconButton","onClick","color","marginLeft","right","top","AddBox","isLoggedInSelector","auth","isLoggedIn","login","logout","useAppDispatch","useDispatch","useActions","actions","useMemo","bindActionCreators","Login","useSelector","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","thunk","authActions","rejected","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","Checkbox","checked","Button","authAsyncActions","authReducer","reducer","TodoLists","demo","todoListSelectors","tasksSelectors","todoListsActions","useEffect","useCallback","helper","padding","Paper","elevation","spacing","flexWrap","overflowX","allTaskTodoList","TodoList","EditableSpan","props","editMode","setEditMode","setTitle","offEditMode","changeItem","autoFocus","onDoubleClick","fetchTasks","tasksActions","allTaskForTodoList","taskForTodoList","t","New","Completed","changeTodoListTitleCallback","newTitle","removeTodoListCallback","all","active","completed","addTaskCallback","addTask","Task","task","Delete","listStyle","paddingLeft","justifyContent","size","todoListsAsyncActions","todoListsReducer","items","removeTask","updateTask","getState","currentTask","find","apiModel","deadline","description","priority","Low","startDate","forEach","removeTaskCallback","changeTaskStatus","changeTaskTitle","className","fontSize","tasksAsyncActions","tasksReducer","appStatusSelector","app","isInitializedSelector","isInitialized","initializeApp","appAsyncActions","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Alert","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","appSelectors","appStatus","AppBar","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","from","textAlign","CircularProgress","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4dadb826.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nexport type TodoListType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type FieldsErrorsType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    fieldsErrors: Array<FieldsErrorsType>\r\n    messages: string[]\r\n    resultCode: number\r\n    data: D\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n        withCredentials: true,\r\n        baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n        headers: {\r\n            \"API-KEY\": \"daffbeb3-8fec-4c34-9d8d-6fcb41a16549\"\r\n        }\r\n    }\r\n)\r\n\r\nexport const todoListsApi = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodoList(todoListId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodoListTitle(todoListId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}`, {title: title})\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    createTask(todoListId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, {title: title})\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{ data: LoginParamsType }>>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const tasksSelector = (state:AppRootStateType) => state.tasks;","import {createAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {FilterValuesType} from \"../Todolists/todolists-reducer\";\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>(\"appActions/setAppStatus\")\r\nconst setAppError = createAction<{error: string | null}>(\"appActions/setAppError\")\r\nconst setIsLoggedIn = createAction<{isLoggedIn: boolean}>(\"auth/setIsLoggedIn\")\r\nconst changeTasksEntityStatus = createAction<{ todoListId: string, taskId: string, entityStatus: RequestStatusType }>(\"tasks/changeTasksEntityStatus\")\r\nconst changeFilterTodoList = createAction<{ id: string, filter: FilterValuesType }>(\"todoLists/changeFilterTodoList\")\r\nconst changeTodoListEntityStatus = createAction<{ todoListId: string, entityStatus: RequestStatusType }>(\"todoLists/changeTodoListEntityStatus\")\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError,\r\n    setIsLoggedIn,\r\n    changeTasksEntityStatus,\r\n    changeFilterTodoList,\r\n    changeTodoListEntityStatus\r\n}","import {FieldsErrorsType, ResponseType} from \"../api/todolist-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {appActions} from \"../features/Actions/App\";\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\nconst {setAppError,setAppStatus}=appActions\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n\r\nexport type ThunkError = { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldsErrorsType> } }\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const todoListsSelector = (state: AppRootStateType) => state.todoLists;","import {todoListsApi, TodoListType} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListDomainType = TodoListType & { filter: FilterValuesType, entityStatus: RequestStatusType }\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nconst {setAppStatus, changeTodoListEntityStatus, changeFilterTodoList} = appActions\r\n\r\nconst fetchTodoLists = createAsyncThunk<{ todoLists: Array<TodoListType> }, undefined, ThunkError>\r\n(\"todoLists/fetchTodoLists\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.getTodoLists()\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {todoLists: response.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodoList = createAsyncThunk(\"todoLists/removeTodoList\", async (todoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTodoListEntityStatus({todoListId: todoListId, entityStatus: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.deleteTodoList(todoListId)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {id: todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTodoList = createAsyncThunk<{ todoList: TodoListType }, string, ThunkError>(\"todoLists/addTodoList\", async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n\r\n        const response = await todoListsApi.createTodoList(title)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {todoList: response.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst changeTodoListTitle = createAsyncThunk(\"todoLists/changeTodoListTitle\", async (payload: { todoListId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.updateTodoListTitle(payload.todoListId, payload.title)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {title: payload.title, id: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"todoLists\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n                return action.payload.todoLists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n            })\r\n            .addCase(removeTodoList.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state.splice(index, 1)\r\n            })\r\n            .addCase(addTodoList.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todoList, filter: \"all\", entityStatus: \"idle\"})\r\n            })\r\n            .addCase(changeTodoListTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state[index].title = action.payload.title\r\n            })\r\n            .addCase(changeFilterTodoList, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index !== -1) state[index].filter = action.payload.filter\r\n            })\r\n            .addCase(changeTodoListEntityStatus, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n                if (index !== -1) state[index].entityStatus = action.payload.entityStatus\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTodoLists, removeTodoList, addTodoList, changeTodoListTitle}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormSubmitHelperType = {\r\n    setError: (error: string) => void\r\n    setValue: (value: string) => void\r\n}\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    title: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem, title, disabled = false}) => {\r\n\r\n    const [value, setValue] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeTitleItemHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n                .then()\r\n        }\r\n    }\r\n\r\n    const addItemHandler = async () => {\r\n        const trimmedTitle = value.trim()\r\n        if (trimmedTitle !== \"\") {\r\n            addItem(trimmedTitle, {setError, setValue})\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: \"flex\", alignItems: \"center\", position: \"relative\"}}>\r\n            <div style={{width: \"218px\"}}>\r\n                <TextField\r\n                    variant={\"outlined\"}\r\n                    value={value}\r\n                    onChange={onChangeTitleItemHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                    onBlur={() => {\r\n                        setError(null)\r\n                    }}\r\n                    helperText={error}\r\n                    label={title}\r\n                    error={!!error}\r\n                    disabled={disabled}\r\n                />\r\n            </div>\r\n            <IconButton onClick={addItemHandler} color=\"primary\" disabled={disabled}\r\n                        style={{marginLeft: \"14px\", position: \"absolute\", right:\"0px\", top:\"0px\"}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const isLoggedInSelector = (state: AppRootStateType) => state.auth.isLoggedIn;","import {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst {setAppStatus, setIsLoggedIn} = appActions\r\n\r\nconst login = createAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType, ThunkError>(\"auth/login\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.login(payload)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst logout = createAsyncThunk(\"auth/logout\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(setIsLoggedIn, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\n\r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {AppDispatchType} from \"../bll/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authActions, authSelectors} from \"./index\"\r\nimport {useAppDispatch} from \"../../utils/utils-redux\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const thunk = authActions.login(values)\r\n            const action = await dispatch(thunk)\r\n            if (authActions.login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noopener noreferrer\"> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox{...formik.getFieldProps(\"rememberMe\")}\r\n                                              checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from \"./selectors\";\r\nimport {asyncActions as authAsyncActions} from \"./auth-reducer\";\r\nimport {slice} from \"./auth-reducer\";\r\nimport {Login} from \"./Login\"\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n}\r\n\r\nconst authReducer = slice.reducer\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    authReducer,\r\n    Login\r\n}","import {TodoListDomainType} from \"./todolists-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TasksStateType} from \"../Task/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {authSelectors} from \"../Login/\";\r\nimport {TodoList, todoListsActions, todoListSelectors} from \"./index\";\r\nimport {tasksSelectors} from \"../Task\";\r\nimport {useActions, useAppDispatch} from \"../../utils/utils-redux\";\r\n\r\ntype TodoListsPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoLists: React.FC<TodoListsPropsType> = ({demo = false}) => {\r\n\r\n    let todoLists: Array<TodoListDomainType> = useSelector(todoListSelectors.todoListsSelector)\r\n    let tasks: TasksStateType = useSelector(tasksSelectors.tasksSelector)\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodoLists} = useActions(todoListsActions)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodoLists()\r\n    }, [])\r\n\r\n    const addTodoList = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        const thunk = todoListsActions.addTodoList(title)\r\n        const action = await dispatch(thunk)\r\n        if (todoListsActions.addTodoList.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error\")\r\n            }\r\n        } else {\r\n            helper.setValue(\"\")\r\n        }\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"10px 0\"}}>\r\n                <Paper style={{padding: \"10px\", width: \"280px\"}}\r\n                       elevation={3}>\r\n                    <AddItemForm addItem={addTodoList} title={\"TodoList title\"}/>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid container spacing={3} style={{flexWrap: \"nowrap\", overflowX: \"scroll\"}}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let allTaskTodoList = tasks[tl.id]\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <div style={{width: \"300px\"}}>\r\n                                    <TodoList\r\n                                        todoList={tl}\r\n                                        tasks={allTaskTodoList}\r\n                                        demo={demo}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        );\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeItem: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeItem(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\")\r\n            offEditMode()\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                         autoFocus\r\n                         onBlur={offEditMode}\r\n                         onChange={onChangeTitleHandler}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         disabled={props.disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses} from \"../../../api/todolist-api\";\r\nimport {TodoListDomainType} from \"../todolists-reducer\";\r\nimport {TaskDomainType} from \"../../Task/tasks-reducer\";\r\nimport {todoListsActions} from \"../index\";\r\nimport {Task, tasksActions} from \"../../Task\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/utils-redux\";\r\nimport {appActions} from \"../../Actions/App\";\r\n\r\ntype TodoListPropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TaskDomainType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo(({demo = false, ...props}) => {\r\n\r\n    const {changeTodoListTitle, removeTodoList} = useActions(todoListsActions)\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeFilterTodoList} = useActions(appActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        fetchTasks(props.todoList.id)\r\n    }, [])\r\n\r\n    let allTaskForTodoList = props.tasks\r\n    let taskForTodoList = allTaskForTodoList\r\n\r\n    if (props.todoList.filter === \"active\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todoList.filter === \"completed\") {\r\n        taskForTodoList = allTaskForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const changeTodoListTitleCallback = useCallback((newTitle: string) => {\r\n        changeTodoListTitle({title: newTitle, todoListId: props.todoList.id})\r\n    }, [props.todoList.id, changeTodoListTitle])\r\n    const removeTodoListCallback = useCallback(() => {\r\n        removeTodoList(props.todoList.id)\r\n    }, [props.todoList.id, removeTodoList])\r\n\r\n    const all = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"all\"}), [props.todoList.id])\r\n    const active = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"active\"}), [props.todoList.id])\r\n    const completed = useCallback(() =>\r\n        changeFilterTodoList({id: props.todoList.id, filter: \"completed\"}), [props.todoList.id])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title, todoListId: props.todoList.id})\r\n        const action = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(action)) {\r\n            if (action.payload?.errors?.length) {\r\n                const error = action.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error\")\r\n            }\r\n        } else {\r\n            helper.setValue(\"\")\r\n        }\r\n    }, [props.todoList.id])\r\n\r\n    const tasks = taskForTodoList.map(t => {\r\n        return (\r\n            <Task key={t.id} task={t} todoListId={props.todoList.id} disabled={t.entityStatus === \"loading\"}/>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <Paper style={{padding: \"10px\", position: \"relative\"}}\r\n               elevation={3}>\r\n            <IconButton style={{position: \"absolute\", right: \"9px\", top: \"3px\"}} onClick={removeTodoListCallback}\r\n                        disabled={props.todoList.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <h3>\r\n                <EditableSpan title={props.todoList.title} changeItem={changeTodoListTitleCallback}\r\n                              disabled={props.todoList.entityStatus === \"loading\"}/>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback} title={\"Task title\"}\r\n                         disabled={props.todoList.entityStatus === \"loading\"}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}}>\r\n                {!tasks.length && <span style={{color: \"gray\", marginLeft: \"15px\"}}>No tasks</span>}\r\n                {tasks}\r\n            </ul>\r\n            <div style={{display: \"flex\", justifyContent: \"space-evenly\"}}>\r\n                <Button\r\n                    color={props.todoList.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={all}>All\r\n                </Button>\r\n                <Button\r\n                    color={props.todoList.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={active}>Active\r\n                </Button>\r\n                <Button\r\n                    color={props.todoList.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    size={\"small\"}\r\n                    onClick={completed}>Completed\r\n                </Button>\r\n            </div>\r\n        </Paper>\r\n    );\r\n})\r\n\r\n\r\n","import * as todoListSelectors from \"./selectors\";\r\nimport {asyncActions as todoListsAsyncActions} from \"./todolists-reducer\";\r\nimport {slice} from \"./todolists-reducer\";\r\nimport {TodoLists} from \"./TodoLists\";\r\nimport {TodoList} from \"./Todolist/TodoList\"\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n}\r\n\r\n\r\nconst todoListsReducer = slice.reducer\r\n\r\nexport {\r\n    todoListSelectors,\r\n    todoListsActions,\r\n    todoListsReducer,\r\n    TodoLists,\r\n    TodoList\r\n}","import {TaskPriorities, TaskStatuses, TaskType, todoListsApi} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError, ThunkError} from \"../../utils/utils-error\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport {RequestStatusType} from \"../Application/application-reducer\";\r\nimport {todoListsActions} from \"../Todolists\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\ntype UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nconst {setAppStatus, changeTasksEntityStatus} = appActions\r\n\r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\nexport type TasksStateType = { [key: string]: Array<TaskDomainType> }\r\nconst initialState: TasksStateType = {}\r\n\r\nconst fetchTasks = createAsyncThunk<{ todoListId: string, tasks: Array<TaskType> }, string, ThunkError>\r\n(\"tasks/fetchTasks\", async (todoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await todoListsApi.getTasks(todoListId)\r\n        thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        return {todoListId, tasks: response.data.items}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTask = createAsyncThunk(\"tasks/removeTask\", async (payload: { todoListId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTasksEntityStatus({\r\n        todoListId: payload.todoListId,\r\n        taskId: payload.taskId,\r\n        entityStatus: \"loading\"\r\n    }))\r\n    try {\r\n        const response = await todoListsApi.deleteTask(payload.todoListId, payload.taskId)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {taskId: payload.taskId, todoListId: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTask = createAsyncThunk<{ task: TaskType }, { title: string, todoListId: string }, ThunkError>(\"tasks/addTask\",\r\n    async (payload, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n        try {\r\n            const response = await todoListsApi.createTask(payload.todoListId, payload.title)\r\n            if (response.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n                return {task: response.data.data.item}\r\n            } else {\r\n                return handleAsyncServerAppError(response.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI)\r\n        }\r\n    })\r\nconst updateTask = createAsyncThunk(\"tasks/updateTask\", async (payload: { taskId: string, model: UpdateTaskDomainModelType, todoListId: string },\r\n                                                               thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const currentTask = state.tasks[payload.todoListId].find(t => t.id === payload.taskId)\r\n    if (!currentTask) {\r\n        return thunkAPI.rejectWithValue(\"error\")\r\n    }\r\n\r\n    const apiModel = {\r\n        title: currentTask.title,\r\n        status: currentTask.status,\r\n        deadline: currentTask.deadline,\r\n        description: currentTask.description,\r\n        priority: TaskPriorities.Low,\r\n        startDate: currentTask.startDate,\r\n        ...payload.model\r\n    }\r\n    try {\r\n        const response = await todoListsApi.updateTask(payload.todoListId, payload.taskId, apiModel)\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n            return {taskId: payload.taskId, model: payload.model, todoListId: payload.todoListId}\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(todoListsActions.addTodoList.fulfilled, (state, action) => {\r\n                state[action.payload.todoList.id] = []\r\n            })\r\n            .addCase(todoListsActions.removeTodoList.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(todoListsActions.fetchTodoLists.fulfilled, (state, action) => {\r\n                action.payload.todoLists.forEach(tl => {\r\n                        if (!state[tl.id]) state[tl.id] = []\r\n                    }\r\n                )\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                return {\r\n                    ...state, [action.payload.todoListId]: action.payload.tasks.map(t => ({...t, entityStatus: \"idle\"}))\r\n                }\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) tasks.splice(index, 1)\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.task.todoListId]\r\n                tasks.unshift({...action.payload.task, entityStatus: \"idle\"})\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n            .addCase(changeTasksEntityStatus, (state, action) => {\r\n                const tasks = state[action.payload.todoListId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index !== -1) tasks[index].entityStatus = action.payload.entityStatus\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTasks, removeTask, addTask, updateTask}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport {tasksActions} from \"./index\";\r\nimport {useActions} from \"../../utils/utils-redux\";\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const removeTaskCallback = useCallback(() => removeTask({\r\n        taskId: props.task.id,\r\n        todoListId: props.todoListId\r\n    }), [props.task.id, props.todoListId, removeTask])\r\n\r\n    const changeTaskStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => updateTask({\r\n        taskId: props.task.id,\r\n        model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n        todoListId: props.todoListId\r\n    }), [props.task.id, props.todoListId, updateTask])\r\n\r\n    const changeTaskTitle = useCallback((newTitle: string) => {\r\n        updateTask({taskId: props.task.id, model: {title: newTitle}, todoListId: props.todoListId})\r\n    }, [props.task.id, props.todoListId, updateTask])\r\n\r\n    return (\r\n        <div style={{position: \"relative\"}}>\r\n            <li className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"secondary\"}\r\n                    checked={props.task.status === TaskStatuses.Completed}\r\n                    onChange={changeTaskStatus}/>\r\n                <EditableSpan title={props.task.title} changeItem={changeTaskTitle} disabled={props.disabled}/>\r\n                <IconButton onClick={removeTaskCallback} disabled={props.disabled}\r\n                            style={{position: \"absolute\", right: \"2px\", top: \"0\"}}>\r\n                    <Delete fontSize={\"small\"}/>\r\n                </IconButton>\r\n            </li>\r\n        </div>\r\n    );\r\n})","import * as tasksSelectors from \"./selectors\";\r\nimport {slice, asyncActions as tasksAsyncActions} from \"./tasks-reducer\";\r\nimport {Task} from \"./Task\";\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n}\r\n\r\nconst tasksReducer = slice.reducer\r\n\r\nexport {\r\n    tasksSelectors,\r\n    tasksActions,\r\n    Task,\r\n    tasksReducer\r\n}","import {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const appStatusSelector = (state:AppRootStateType) => state.app.status\r\nexport const isInitializedSelector = (state: AppRootStateType) => state.app.isInitialized","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../../api/todolist-api\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/utils-error\";\r\nimport {appActions} from \"../Actions/App\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: \"loading\" as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst {setAppStatus,setIsLoggedIn} = appActions\r\n\r\nconst initializeApp = createAsyncThunk(\"application/initializeApp\", async (payload, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: \"loading\"}))\r\n    try {\r\n        const response = await authAPI.me()\r\n        if (response.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedIn({isLoggedIn: true}));\r\n            thunkAPI.dispatch(setAppStatus({status: \"succeeded\"}))\r\n        } else {\r\n            return handleAsyncServerAppError(response.data, thunkAPI)\r\n        }\r\n        return {isInitialized: true}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = action.payload.isInitialized\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\n\r\n","import * as appSelectors from \"./selectors\";\r\nimport {slice} from \"./application-reducer\"\r\nimport {asyncActions as appAsyncActions} from \"./application-reducer\"\r\n\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n}\r\n\r\nconst appReducer = slice.reducer\r\n\r\nexport {\r\n    appSelectors,\r\n    appActions,\r\n    appReducer\r\n}\r\n","import {tasksReducer} from '../features/Task';\r\nimport {todoListsReducer} from '../features/Todolists';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../features/Application\";\r\nimport {authReducer} from \"../features/Login\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport { useActions } from '../../utils/utils-redux';\r\nimport { appActions } from '../../features/Actions/App';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError({error: null})\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodoLists} from \"../features/Todolists\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors} from \"../features/Login\";\r\nimport {appActions, appSelectors} from \"../features/Application\";\r\nimport {useActions} from \"../utils/utils-redux\";\r\n\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App: React.FC<AppPropsType> = ({demo = false}) => {\r\n\r\n    const isInitialized = useSelector(appSelectors.isInitializedSelector)\r\n    const appStatus = useSelector(appSelectors.appStatusSelector)\r\n    const isLoggedIn = useSelector(authSelectors.isLoggedInSelector)\r\n    const {initializeApp} = useActions(appActions)\r\n    const {logout} = useActions(authActions)\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    const logoutCallback = () => {\r\n        logout()\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress color=\"secondary\" size={150}/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackbar/>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutCallback}>Logout</Button>}\r\n                </Toolbar>\r\n                {appStatus === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => <TodoLists demo={demo}/>}/>\r\n                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                    <Route path=\"/404\" render={() => <h1>ERROR 404. PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from=\"*\" to=\"/404\"/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {App} from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename=\"/todolist\">\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}